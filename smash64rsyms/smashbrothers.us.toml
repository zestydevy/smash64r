# Config file for Smash 64 Recompilation.

[input]
entrypoint_name = "entry"
entrypoint = 0x80000400
# Paths are relative to the location of this config file.
elf_path = "smashbrothers.us.elf"
output_func_path = "RecompiledFuncs"
#use_absolute_symbols = true
manual_funcs = [
    { name = "_bnkfPatchBank", section = ".main", vram = 0x8001E708, size = 0xB8 },
    { name = "_bnkfPatchInst", section = ".main", vram = 0x8001E7C0, size = 0x98 },
    { name = "_bnkfPatchSound", section = ".main", vram = 0x8001E858, size = 0x58 },
    { name = "_bnkfPatchWaveTable", section = ".main", vram = 0x8001E8B0, size = 0x6C },
]

[patches]
ignored = [
    "n_aspMainTextStart",
    "func_A4000040_40",
]

# remove imem/dmem checks
[[patches.instruction]]
func = "syMainThread5"
vram = 0x8000063C
value = 0x00000000 # j -> nop
[[patches.instruction]]
func = "syMainThread5"
vram = 0x80000644
value = 0x00000000 # j -> nop

# Changes reading a hardware register into a call to the equivalent libultra function
[[patches.hook]]
func = "auThreadMain"
text = "    osAiGetLength_recomp(rdram, ctx);"
before_vram = 0x800202E0
[[patches.instruction]]
func = "auThreadMain"
vram = 0x800202E0
value = 0x00000000 # nop
[[patches.instruction]]
func = "auThreadMain"
vram = 0x800202E4
value = 0x00406825 # move t5, v0

[[patches.hook]]
func = "auThreadMain"
text = "    osAiGetLength_recomp(rdram, ctx);"
before_vram = 0x800209A8
[[patches.instruction]]
func = "auThreadMain"
vram = 0x800209A8
value = 0x00000000 # nop
[[patches.instruction]]
func = "auThreadMain"
vram = 0x800209AC
value = 0x00406025 # move t4, v0


[[patches.hook]]
func = "func_8002103C"
text = "    yield_self(rdram);"

[[patches.hook]]
func = "func_80021048"
text = "    yield_self_1ms(rdram);"

[[patches.hook]]
func = "auIsBGMPlaying"
text = "    yield_self(rdram);"

# fix anti-piracy check that randomizes knockback
[[patches.instruction]]
func = "mnVSModeFuncStart"
vram = 0x80134628
value = 0x1100000B # beq $t0, $zero, 0x0B

[[patches.hook]]
func = "syDmaLoadOverlay"
text = "    load_overlays(MEM_W(0, ctx->r4), MEM_W(0x8, ctx->r4), (uint32_t)(MEM_W(0x4, ctx->r4) - MEM_W(0x0, ctx->r4)));"